// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aQ9D2JdX7H1bg1rqtUnJBi
// Component: pZk6zgOati8V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ChatInputHypernova from "../../ChatInputHypernova"; // plasmic-import: qxzVzpCa7tUp/component

import { useScreenVariants as useScreenVariantsbd0VuldR44F } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Bd0VuldR44F_/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aQ9D2JdX7H1bg1rqtUnJBi/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: pZk6zgOati8V/css

import ArrowsvgIcon from "./icons/PlasmicIcon__Arrowsvg"; // plasmic-import: VX7FvxE3Cnv4/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: kYCe8-7UDzPB/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  navBar?: Flex__<"div">;
  conversationListAnnonUsers2?: Flex__<"div">;
  chat75?: Flex__<"div">;
  anonChatInput?: Flex__<typeof ChatInputHypernova>;
  _1?: Flex__<"div">;
  footerAnon?: Flex__<"div">;
  logo?: Flex__<"div">;
  policies?: Flex__<"div">;
  social?: Flex__<"div">;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "anonChatInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "anonChatInput.fileValues",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbd0VuldR44F()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_legacy_feed_page_designs_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
            id={"nav"}
          >
            <div
              data-plasmic-name={"navBar"}
              data-plasmic-override={overrides.navBar}
              className={classNames(projectcss.all, sty.navBar)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yvnQo)}>
                <div className={classNames(projectcss.all, sty.freeBox__xfhZj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xgfur)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpswwwdevynai"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://www.devyn.ai/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpswwwdevynai"] != null &&
                        typeof $steps["goToHttpswwwdevynai"] === "object" &&
                        typeof $steps["goToHttpswwwdevynai"].then === "function"
                      ) {
                        $steps["goToHttpswwwdevynai"] = await $steps[
                          "goToHttpswwwdevynai"
                        ];
                      }
                    }}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__xvyI)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "25px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "160px"
                      }
                      loading={"eager"}
                      src={{
                        src: "/plasmic/aug_22_1_ssg_app_page_generator/images/devynTextWhitEsvg.svg",
                        fullWidth: 300,
                        fullHeight: 83,
                        aspectRatio: 3.636364
                      }}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sQ40U)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qNz0D
                    )}
                    component={Link}
                    href={"https://www.devyn.ai/"}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__olItk)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "19px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "30px"
                      }
                      loading={"eager"}
                      src={{
                        src: "/plasmic/aug_22_1_ssg_app_page_generator/images/userLightIconsvg.svg",
                        fullWidth: 131,
                        fullHeight: 150,
                        aspectRatio: 0.875
                      }}
                    />
                  </PlasmicLink__>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      sty.button__cENaF
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpswwwdevynai"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://www.devyn.ai/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpswwwdevynai"] != null &&
                        typeof $steps["goToHttpswwwdevynai"] === "object" &&
                        typeof $steps["goToHttpswwwdevynai"].then === "function"
                      ) {
                        $steps["goToHttpswwwdevynai"] = await $steps[
                          "goToHttpswwwdevynai"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__khYpa
                      )}
                    >
                      {"Try DEVYN"}
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__drwic
            )}
          >
            <React.Fragment>
              <React.Fragment>{"Launch Marketing In\n"}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ textDecorationLine: "line-through", color: "#FC2E2D" }}
              >
                {"Weeks"}
              </span>
              <React.Fragment>{" Seconds."}</React.Fragment>
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uH6NI
            )}
          >
            {
              "Generate leads from Meta Ads \nwith DEVYN, a Fully-Autonomous Marketer."
            }
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  let data = [
                    {
                      content:
                        "Hey, I\u2019m DEVYN - let me show you a little AI magic... \uD83E\uDDC4",
                      role: "system",
                      created_at: ""
                    },
                    {
                      content: "What's your email address?",
                      role: "system",
                      created_at: ""
                    }
                  ];

                  return data;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"conversationListAnnonUsers2"}
                data-plasmic-override={overrides.conversationListAnnonUsers2}
                className={classNames(
                  projectcss.all,
                  sty.conversationListAnnonUsers2
                )}
                key={currentIndex}
              >
                <div
                  data-plasmic-name={"chat75"}
                  data-plasmic-override={overrides.chat75}
                  className={classNames(projectcss.all, sty.chat75)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oi3E8)}
                  >
                    {(() => {
                      try {
                        return currentItem.role == "system";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__iNhkD)}
                        displayHeight={"42px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"42px"}
                        loading={"eager"}
                        src={{
                          src: "/plasmic/aug_22_1_ssg_app_page_generator/images/devynIconpng2.png",
                          fullWidth: 1000,
                          fullHeight: 1000,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.role == "user";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ireop)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        height={"42"}
                        loading={"eager"}
                        width={"42"}
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cbhfh)}
                  >
                    {(() => {
                      try {
                        return currentItem.content != "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gq5J
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return currentItem?.content;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "currentItem.content";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    ) : null}
                  </div>
                </div>
              </div>
            );
          })}
          <ChatInputHypernova
            data-plasmic-name={"anonChatInput"}
            data-plasmic-override={overrides.anonChatInput}
            className={classNames("__wab_instance", sty.anonChatInput)}
            fileValues={generateStateValueProp($state, [
              "anonChatInput",
              "fileValues"
            ])}
            onFileValuesChange={generateStateOnChangeProp($state, [
              "anonChatInput",
              "fileValues"
            ])}
            onSubmit={async event => {
              const $steps = {};

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (!$queries.chats || !$queries.chats.data) {
                            $queries.chats = { data: [] };
                          }
                          return $queries.chats.data.unshift(
                            {
                              content:
                                "Hey, I\u2019m DEVYN - let me show you a little AI magic... \uD83E\uDDC4",
                              role: "system",
                              created_at: ""
                            },
                            {
                              content: "What's your email address?",
                              role: "system",
                              created_at: ""
                            },
                            {
                              content: $state.anonChatInput.value,
                              role: "user",
                              created_at: ""
                            },
                            {
                              content:
                                "Hang tight! I\u2019m creating an account for you...",
                              role: "system",
                              created_at: ""
                            }
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (async () => {
                          function getFormData() {
                            const trackingElement = document.querySelector(
                              "[data-tracking-parameters]"
                            );
                            const trackingData = JSON.parse(
                              trackingElement.dataset.trackingParameters
                            );
                            const formData = new FormData();
                            formData.append(
                              "email",
                              $state.anonChatInput.value
                            );
                            const files = $state.anonChatInput.fileValues.map(
                              fileObj => {
                                const { name, type, contents } = fileObj;
                                const blob = new Blob([atob(contents)], {
                                  type
                                });
                                return new File([blob], name, { type });
                              }
                            );
                            console.log("Files", files);
                            for (let i = 0; i < files.length; i++) {
                              formData.append(`files_${i}`, files[i]);
                            }
                            formData.append("type", "emailaccount");
                            formData.append("utm_parameter", trackingData);
                            return formData;
                          }
                          async function handleSuccess(response) {
                            const jsonResponse = await response.json();
                            if (jsonResponse.hasOwnProperty("redirectURL")) {
                              window.location.href = jsonResponse.redirectURL;
                            } else {
                              console.error(
                                "RedirectURL not found in response."
                              );
                            }
                            return "Success";
                          }
                          function handleError() {
                            console.log("Error");
                            return "There was an error. Please try again.";
                          }
                          async function submit() {
                            const formData = getFormData();
                            for (let pair of formData.entries()) {
                              console.log(pair[0] + ": " + pair[1]);
                            }
                            try {
                              $state.anonChatInput.value = "";
                              $state.anonChatInput.fileValues = [];
                              const response = await fetch(
                                "https://hook.us1.make.com/8pnqe2ypwxxklhk66zfy18qrx8vfkrqw",
                                {
                                  method: "POST",
                                  body: formData
                                }
                              );
                              return handleSuccess(response);
                            } catch (err) {
                              return handleError();
                            }
                          }
                          return submit()
                            .then(response => {
                              console.log(response);
                            })
                            .catch(error => {
                              console.error(error);
                            });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            onTextValueChange={generateStateOnChangeProp($state, [
              "anonChatInput",
              "value"
            ])}
            placeholder={"Enter Your Email Address Here \ud83d\udce9"}
            textValue={generateStateValueProp($state, [
              "anonChatInput",
              "value"
            ])}
          />

          <div
            data-plasmic-name={"_1"}
            data-plasmic-override={overrides._1}
            className={classNames(projectcss.all, sty._1)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qpcgn)}>
              <div className={classNames(projectcss.all, sty.freeBox__e92Jk)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bpQaS
                  )}
                >
                  {"Starts at $0"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ybHo
                  )}
                >
                  {"No Card Required"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Y62S
                  )}
                >
                  {
                    "Everything you need to generate demand with the push of a button..."
                  }
                </div>
                <button
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.button__ySVQ
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHttpswwwdevynai"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: "https://www.devyn.ai/"
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHttpswwwdevynai"] != null &&
                      typeof $steps["goToHttpswwwdevynai"] === "object" &&
                      typeof $steps["goToHttpswwwdevynai"].then === "function"
                    ) {
                      $steps["goToHttpswwwdevynai"] = await $steps[
                        "goToHttpswwwdevynai"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jdncX
                    )}
                  >
                    {"Try DEVYN"}
                  </div>
                </button>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xfO1A)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kXQlv
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"DEVYN"}
                    </span>
                    <React.Fragment>{" Can:"}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4FTep
                  )}
                >
                  {"\u2713   Build Your Funnels"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Pkxi
                  )}
                >
                  {"\u2713   Design Your Creative"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__duBgC
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u2713   Run Your Ads"
                    : "\u2713   Manage Your Ads"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iJvd
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u2713   Manage Your Leads"
                    : "\u2713   Close Your Leads"}
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ac2B)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rqw9Z
              )}
            >
              {"Try DEVYN for FREE"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sbhtZ)}>
              <ArrowsvgIcon
                className={classNames(projectcss.all, sty.svg___3IYdg)}
                role={"img"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__g10A4)}>
            <div className={classNames(projectcss.all, sty.freeBox__h4406)}>
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__xtDym)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wjG8T
                )}
              >
                {"Full-Access for FREE"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__iPmuU)}>
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__zus0C)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mqMnu
                )}
              >
                {"No Card Required"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tbbbM)}>
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__sLdSv)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6QDed
                )}
              >
                {"Start Generating Leads Today"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"footerAnon"}
            data-plasmic-override={overrides.footerAnon}
            className={classNames(projectcss.all, sty.footerAnon)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__atY0A)}>
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lxSCt)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"160px"}
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "eager"
                      : "eager"
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHttpswwwdevynai"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: "https://www.devyn.ai/"
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHttpswwwdevynai"] != null &&
                      typeof $steps["goToHttpswwwdevynai"] === "object" &&
                      typeof $steps["goToHttpswwwdevynai"].then === "function"
                    ) {
                      $steps["goToHttpswwwdevynai"] = await $steps[
                        "goToHttpswwwdevynai"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/aug_22_1_ssg_app_page_generator/images/devynTextWhitEsvg.svg",
                    fullWidth: 300,
                    fullHeight: 83,
                    aspectRatio: 3.636364
                  }}
                />
              </div>
              <div
                data-plasmic-name={"policies"}
                data-plasmic-override={overrides.policies}
                className={classNames(projectcss.all, sty.policies)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9DEw
                  )}
                >
                  {"Privacy Policy"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lHh
                  )}
                >
                  {"Terms of Service"}
                </div>
              </div>
              <div
                data-plasmic-name={"social"}
                data-plasmic-override={overrides.social}
                className={classNames(projectcss.all, sty.social)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__rGzL2
                  )}
                  component={Link}
                  href={"https://twitter.com/askdevyn"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__nuq9D)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/aug_22_1_ssg_app_page_generator/images/xsvg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wozXs
                  )}
                  component={Link}
                  href={"https://www.instagram.com/devyn.ai/"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cF3Kf)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/aug_22_1_ssg_app_page_generator/images/instagramsvg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tbX9Z
                  )}
                  component={Link}
                  href={"https://www.facebook.com/devynai"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__j5Rc)}
                    displayHeight={"25px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/aug_22_1_ssg_app_page_generator/images/metasvg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </PlasmicLink__>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sVc9)}>
              <div className={classNames(projectcss.all, sty.freeBox__ibLhR)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pO0L9
                  )}
                >
                  {"Product"}
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___0HynX
                  )}
                  component={Link}
                  href={"https://www.devyn.ai/pricing"}
                  platform={"nextjs"}
                >
                  {"Pricing"}
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__neRl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jd87A
                  )}
                >
                  {"Support"}
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__o7A4
                  )}
                  component={Link}
                  href={"https://www.devyn.ai/contact"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pf29H)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__igTmg
                  )}
                >
                  {"Resources"}
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tJWho
                  )}
                  component={Link}
                  href={"https://www.devyn.ai/blog"}
                  platform={"nextjs"}
                >
                  {"Blog"}
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aiMq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jaeaf
                  )}
                >
                  {"Company"}
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wTuDl
                  )}
                  component={Link}
                  href={"https://www.devyn.ai/team"}
                  platform={"nextjs"}
                >
                  {"Team"}
                </PlasmicLink__>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___7SaLi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0CJuF
                )}
              >
                {"Copyright \u00a9 2024 Presell, Inc. All rights reserved."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9O5Lc
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__tGv65
                      )}
                      component={Link}
                      href={"https://devyn.ai/privacy"}
                      platform={"nextjs"}
                    >
                      {"Privacy Policy"}
                    </PlasmicLink__>
                  }
                  <React.Fragment>{" | "}</React.Fragment>
                  {
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link__eHRja
                      )}
                      component={Link}
                      href={"https://www.devyn.ai/terms"}
                      platform={"nextjs"}
                    >
                      {"Terms of Service"}
                    </PlasmicLink__>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navBar",
    "conversationListAnnonUsers2",
    "chat75",
    "anonChatInput",
    "_1",
    "footerAnon",
    "logo",
    "policies",
    "social"
  ],
  header: ["header", "navBar"],
  navBar: ["navBar"],
  conversationListAnnonUsers2: ["conversationListAnnonUsers2", "chat75"],
  chat75: ["chat75"],
  anonChatInput: ["anonChatInput"],
  _1: ["_1"],
  footerAnon: ["footerAnon", "logo", "policies", "social"],
  logo: ["logo"],
  policies: ["policies"],
  social: ["social"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navBar: "div";
  conversationListAnnonUsers2: "div";
  chat75: "div";
  anonChatInput: typeof ChatInputHypernova;
  _1: "div";
  footerAnon: "div";
  logo: "div";
  policies: "div";
  social: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navBar: makeNodeComponent("navBar"),
    conversationListAnnonUsers2: makeNodeComponent(
      "conversationListAnnonUsers2"
    ),
    chat75: makeNodeComponent("chat75"),
    anonChatInput: makeNodeComponent("anonChatInput"),
    _1: makeNodeComponent("_1"),
    footerAnon: makeNodeComponent("footerAnon"),
    logo: makeNodeComponent("logo"),
    policies: makeNodeComponent("policies"),
    social: makeNodeComponent("social"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
