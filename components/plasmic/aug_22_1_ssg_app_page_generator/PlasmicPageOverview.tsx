// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aQ9D2JdX7H1bg1rqtUnJBi
// Component: riJvveFjFSfD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SqueezePlasmicCmsHypernova2 from "../../SqueezePlasmicCmsHypernova2"; // plasmic-import: 6-6CHHuzBgUc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aQ9D2JdX7H1bg1rqtUnJBi/projectcss
import sty from "./PlasmicPageOverview.module.css"; // plasmic-import: riJvveFjFSfD/css

createPlasmicElementProxy;

export type PlasmicPageOverview__VariantMembers = {};
export type PlasmicPageOverview__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageOverview__VariantsArgs;
export const PlasmicPageOverview__VariantProps = new Array<VariantPropType>();

export type PlasmicPageOverview__ArgsType = {};
type ArgPropType = keyof PlasmicPageOverview__ArgsType;
export const PlasmicPageOverview__ArgProps = new Array<ArgPropType>();

export type PlasmicPageOverview__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  squeezePlasmicCmsHypernova2?: Flex__<typeof SqueezePlasmicCmsHypernova2>;
};

export interface DefaultPageOverviewProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageOverview__RenderFunc(props: {
  variants: PlasmicPageOverview__VariantsArgs;
  args: PlasmicPageOverview__ArgsType;
  overrides: PlasmicPageOverview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPageOverview.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPageOverview.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPageOverview.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPageOverview.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPageOverview.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPageOverview.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPageOverview.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPageOverview.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_legacy_feed_page_designs_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <SqueezePlasmicCmsHypernova2
                data-plasmic-name={"squeezePlasmicCmsHypernova2"}
                data-plasmic-override={overrides.squeezePlasmicCmsHypernova2}
                className={classNames(
                  "__wab_instance",
                  sty.squeezePlasmicCmsHypernova2
                )}
                slug={(() => {
                  try {
                    return $ctx.params.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "squeezePlasmicCmsHypernova2"],
  freeBox: ["freeBox", "squeezePlasmicCmsHypernova2"],
  squeezePlasmicCmsHypernova2: ["squeezePlasmicCmsHypernova2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  squeezePlasmicCmsHypernova2: typeof SqueezePlasmicCmsHypernova2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageOverview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageOverview__VariantsArgs;
    args?: PlasmicPageOverview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageOverview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageOverview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageOverview__ArgProps,
          internalVariantPropNames: PlasmicPageOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageOverview";
  } else {
    func.displayName = `PlasmicPageOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicPageOverview = Object.assign(
  // Top-level PlasmicPageOverview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    squeezePlasmicCmsHypernova2: makeNodeComponent(
      "squeezePlasmicCmsHypernova2"
    ),

    // Metadata about props expected for PlasmicPageOverview
    internalVariantProps: PlasmicPageOverview__VariantProps,
    internalArgProps: PlasmicPageOverview__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "DEVYN - Page Overview",
      description:
        "Easily edit generated funnel web pages with a simple point-and-click editor. ",
      ogImageSrc:
        "https://site-assets.plasmic.app/958b1ea1d1426346a68c020d489eb0bd.png",
      canonical: ""
    }
  }
);

export default PlasmicPageOverview;
/* prettier-ignore-end */
