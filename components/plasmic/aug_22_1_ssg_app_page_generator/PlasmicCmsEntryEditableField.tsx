// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aQ9D2JdX7H1bg1rqtUnJBi
// Component: NTEUV05d7zGG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aQ9D2JdX7H1bg1rqtUnJBi/projectcss
import sty from "./PlasmicCmsEntryEditableField.module.css"; // plasmic-import: NTEUV05d7zGG/css

import EditSvgrepoComsvgIcon from "./icons/PlasmicIcon__EditSvgrepoComsvg"; // plasmic-import: bPIDJttJ1rxY/icon

createPlasmicElementProxy;

export type PlasmicCmsEntryEditableField__VariantMembers = {
  type: "text" | "image";
  editable: "editable";
  editing: "editing";
  loading: "loading";
  fontSize: "_16Px" | "_18Px" | "_22Px" | "_25Px";
  fontWeight: "normal" | "medium" | "bold";
  color: "darkGrey" | "black" | "white";
  borderRadius: "_0Px" | "_10Px";
};
export type PlasmicCmsEntryEditableField__VariantsArgs = {
  type?: SingleChoiceArg<"text" | "image">;
  editable?: SingleBooleanChoiceArg<"editable">;
  editing?: SingleBooleanChoiceArg<"editing">;
  loading?: SingleBooleanChoiceArg<"loading">;
  fontSize?: SingleChoiceArg<"_16Px" | "_18Px" | "_22Px" | "_25Px">;
  fontWeight?: SingleChoiceArg<"normal" | "medium" | "bold">;
  color?: SingleChoiceArg<"darkGrey" | "black" | "white">;
  borderRadius?: SingleChoiceArg<"_0Px" | "_10Px">;
};
type VariantPropType = keyof PlasmicCmsEntryEditableField__VariantsArgs;
export const PlasmicCmsEntryEditableField__VariantProps =
  new Array<VariantPropType>(
    "type",
    "editable",
    "editing",
    "loading",
    "fontSize",
    "fontWeight",
    "color",
    "borderRadius"
  );

export type PlasmicCmsEntryEditableField__ArgsType = {
  slug?: string;
  field?: string;
};
type ArgPropType = keyof PlasmicCmsEntryEditableField__ArgsType;
export const PlasmicCmsEntryEditableField__ArgProps = new Array<ArgPropType>(
  "slug",
  "field"
);

export type PlasmicCmsEntryEditableField__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  curValueHolder?: Flex__<"div">;
  curValueInput?: Flex__<typeof AntdInput>;
  text?: Flex__<"div">;
};

export interface DefaultCmsEntryEditableFieldProps {
  slug?: string;
  field?: string;
  type?: SingleChoiceArg<"text" | "image">;
  editable?: SingleBooleanChoiceArg<"editable">;
  editing?: SingleBooleanChoiceArg<"editing">;
  loading?: SingleBooleanChoiceArg<"loading">;
  fontSize?: SingleChoiceArg<"_16Px" | "_18Px" | "_22Px" | "_25Px">;
  fontWeight?: SingleChoiceArg<"normal" | "medium" | "bold">;
  color?: SingleChoiceArg<"darkGrey" | "black" | "white">;
  borderRadius?: SingleChoiceArg<"_0Px" | "_10Px">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCmsEntryEditableField__RenderFunc(props: {
  variants: PlasmicCmsEntryEditableField__VariantsArgs;
  args: PlasmicCmsEntryEditableField__ArgsType;
  overrides: PlasmicCmsEntryEditableField__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "editing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editing
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loading
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "curValueInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.curValue;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "curValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.type === "image"
                ? $queries.fetchPageData.data.response.rows[0].data[
                    $props.field
                  ].url
                : $queries.fetchPageData.data.response.rows[0].data[
                    $props.field
                  ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fontSize",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontSize
      },
      {
        path: "fontWeight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontWeight
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "borderRadius",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.borderRadius
      },
      {
        path: "editable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editable
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    fetchPageData: usePlasmicDataOp(() => {
      return {
        sourceId: "feqv2xxUVDgpmz5wctFzXi",
        opId: "67e64bad-29bd-4d30-bf11-1e285071c82b",
        userArgs: {
          params: [
            JSON.stringify({
              where: { _id: $props.slug },
              limit: 1,
              offset: 0
            })
          ]
        },
        cacheKey: `plasmic.$.67e64bad-29bd-4d30-bf11-1e285071c82b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root,
        {
          [sty.rooteditable]: hasVariant($state, "editable", "editable"),
          [sty.rootediting]: hasVariant($state, "editing", "editing"),
          [sty.rootloading]: hasVariant($state, "loading", "loading"),
          [sty.roottype_image]: hasVariant($state, "type", "image"),
          [sty.roottype_image_editable]:
            hasVariant($state, "editable", "editable") &&
            hasVariant($state, "type", "image"),
          [sty.roottype_image_editing]:
            hasVariant($state, "editing", "editing") &&
            hasVariant($state, "type", "image"),
          [sty.roottype_image_loading]:
            hasVariant($state, "loading", "loading") &&
            hasVariant($state, "type", "image"),
          [sty.roottype_text]: hasVariant($state, "type", "text")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(
        hasVariant($state, "loading", "loading")
          ? true
          : (() => {
              try {
                return !(
                  $queries.fetchPageData.isLoading &&
                  (typeof $state.curValue === "undefined" ||
                    $state.curValue === null ||
                    $state.curValue.length === 0)
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__jgy7X, {
            [sty.freeBoxeditable__jgy7XyWctl]: hasVariant(
              $state,
              "editable",
              "editable"
            ),
            [sty.freeBoxloading__jgy7XfOShm]: hasVariant(
              $state,
              "loading",
              "loading"
            ),
            [sty.freeBoxtype_image__jgy7XZcb8B]: hasVariant(
              $state,
              "type",
              "image"
            ),
            [sty.freeBoxtype_image_editable__jgy7XZcb8BYWctl]:
              hasVariant($state, "editable", "editable") &&
              hasVariant($state, "type", "image"),
            [sty.freeBoxtype_image_editing__jgy7XZcb8BClfhW]:
              hasVariant($state, "editing", "editing") &&
              hasVariant($state, "type", "image"),
            [sty.freeBoxtype_text__jgy7XHRpT]: hasVariant(
              $state,
              "type",
              "text"
            )
          })}
        >
          <EditSvgrepoComsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgeditable]: hasVariant($state, "editable", "editable"),
              [sty.svgtype_image]: hasVariant($state, "type", "image"),
              [sty.svgtype_image_editable]:
                hasVariant($state, "type", "image") &&
                hasVariant($state, "editable", "editable"),
              [sty.svgtype_image_editing]:
                hasVariant($state, "editing", "editing") &&
                hasVariant($state, "type", "image")
            })}
            role={"img"}
          />

          {(hasVariant($state, "editing", "editing") ? false : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___8VTQk, {
                [sty.freeBoxborderRadius__10Px___8VTQkNw6R9]: hasVariant(
                  $state,
                  "borderRadius",
                  "_10Px"
                ),
                [sty.freeBoxeditable___8VTQkyWctl]: hasVariant(
                  $state,
                  "editable",
                  "editable"
                ),
                [sty.freeBoxediting___8VTQkclfhW]: hasVariant(
                  $state,
                  "editing",
                  "editing"
                ),
                [sty.freeBoxloading___8VTQkfOShm]: hasVariant(
                  $state,
                  "loading",
                  "loading"
                ),
                [sty.freeBoxtype_image___8VTQkZcb8B]: hasVariant(
                  $state,
                  "type",
                  "image"
                ),
                [sty.freeBoxtype_image_editable___8VTQkZcb8BYWctl]:
                  hasVariant($state, "type", "image") &&
                  hasVariant($state, "editable", "editable"),
                [sty.freeBoxtype_text___8VTQkHRpT]: hasVariant(
                  $state,
                  "type",
                  "text"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateEditing"] =
                  $state.editable === "editable" || $state.editable === true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "editing",
                          operation: 4,
                          value: "editing"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateEditing"] != null &&
                  typeof $steps["updateEditing"] === "object" &&
                  typeof $steps["updateEditing"].then === "function"
                ) {
                  $steps["updateEditing"] = await $steps["updateEditing"];
                }
              }}
            >
              {(
                hasVariant($state, "type", "image")
                  ? (() => {
                      try {
                        return (() => {
                          return $state.curValue && $state.curValue.length > 0;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ebisf, {
                    [sty.imgborderRadius__0Px__ebisfDmVpH]: hasVariant(
                      $state,
                      "borderRadius",
                      "_0Px"
                    ),
                    [sty.imgborderRadius__10Px__ebisfNw6R9]: hasVariant(
                      $state,
                      "borderRadius",
                      "_10Px"
                    ),
                    [sty.imgeditable__ebisfyWctl]: hasVariant(
                      $state,
                      "editable",
                      "editable"
                    ),
                    [sty.imgtype_image__ebisfZcb8B]: hasVariant(
                      $state,
                      "type",
                      "image"
                    ),
                    [sty.imgtype_image_editable__ebisfZcb8BYWctl]:
                      hasVariant($state, "type", "image") &&
                      hasVariant($state, "editable", "editable"),
                    [sty.imgtype_image_editing__ebisfZcb8BClfhW]:
                      hasVariant($state, "editing", "editing") &&
                      hasVariant($state, "type", "image")
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.curValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(
                hasVariant($state, "type", "image")
                  ? (() => {
                      try {
                        return (() => {
                          return !(
                            $state.curValue && $state.curValue.length > 0
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  data-plasmic-name={"curValueHolder"}
                  data-plasmic-override={overrides.curValueHolder}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.curValueHolder,
                    {
                      [sty.curValueHolderborderRadius__0Px]: hasVariant(
                        $state,
                        "borderRadius",
                        "_0Px"
                      ),
                      [sty.curValueHolderborderRadius__10Px]: hasVariant(
                        $state,
                        "borderRadius",
                        "_10Px"
                      ),
                      [sty.curValueHoldercolor_black]: hasVariant(
                        $state,
                        "color",
                        "black"
                      ),
                      [sty.curValueHoldercolor_white]: hasVariant(
                        $state,
                        "color",
                        "white"
                      ),
                      [sty.curValueHoldereditable]: hasVariant(
                        $state,
                        "editable",
                        "editable"
                      ),
                      [sty.curValueHolderfontSize__18Px]: hasVariant(
                        $state,
                        "fontSize",
                        "_18Px"
                      ),
                      [sty.curValueHolderfontSize__22Px]: hasVariant(
                        $state,
                        "fontSize",
                        "_22Px"
                      ),
                      [sty.curValueHolderfontSize__25Px]: hasVariant(
                        $state,
                        "fontSize",
                        "_25Px"
                      ),
                      [sty.curValueHolderfontWeight_bold]: hasVariant(
                        $state,
                        "fontWeight",
                        "bold"
                      ),
                      [sty.curValueHolderfontWeight_medium]: hasVariant(
                        $state,
                        "fontWeight",
                        "medium"
                      ),
                      [sty.curValueHolderloading]: hasVariant(
                        $state,
                        "loading",
                        "loading"
                      ),
                      [sty.curValueHoldertype_image]: hasVariant(
                        $state,
                        "type",
                        "image"
                      ),
                      [sty.curValueHoldertype_image_editable]:
                        hasVariant($state, "editable", "editable") &&
                        hasVariant($state, "type", "image"),
                      [sty.curValueHoldertype_text]: hasVariant(
                        $state,
                        "type",
                        "text"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "type", "image") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.curValue || $state.type === "image"
                            ? "Click to Add Image"
                            : "Click to Edit";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Testing";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.curValue || "Click to Edit";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Testing";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant($state, "editing", "editing") &&
            hasVariant($state, "type", "image")
              ? true
              : hasVariant($state, "editing", "editing")
              ? true
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__tyM2T, {
                [sty.freeBoxediting__tyM2TclfhW]: hasVariant(
                  $state,
                  "editing",
                  "editing"
                ),
                [sty.freeBoxtype_image_editing__tyM2TZcb8BClfhW]:
                  hasVariant($state, "editing", "editing") &&
                  hasVariant($state, "type", "image")
              })}
              onBlur={async event => {
                const $steps = {};

                $steps["httpPut"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "u5abu9PBqZVDeR6z44y2FF",
                          opId: "3fd6cbad-3ab8-47f9-8d78-3e2a026667ed",
                          userArgs: {
                            path: [$props.slug],
                            body: [
                              $queries.fetchPageData.data.response.rows[0]
                                .identifier,
                              $props.field,
                              $state.curValue
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: [
                            "67e64bad-29bd-4d30-bf11-1e285071c82b"
                          ],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["httpPut"] != null &&
                  typeof $steps["httpPut"] === "object" &&
                  typeof $steps["httpPut"].then === "function"
                ) {
                  $steps["httpPut"] = await $steps["httpPut"];
                }

                $steps["updateEditing"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "editing",
                        operation: 6,
                        value: "editing"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditing"] != null &&
                  typeof $steps["updateEditing"] === "object" &&
                  typeof $steps["updateEditing"].then === "function"
                ) {
                  $steps["updateEditing"] = await $steps["updateEditing"];
                }
              }}
            >
              {(
                hasVariant($state, "editing", "editing") &&
                hasVariant($state, "type", "image")
                  ? true
                  : hasVariant($state, "editing", "editing")
                  ? false
                  : hasVariant($state, "type", "image")
                  ? true
                  : true
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__kWoF, {
                    [sty.imgeditable__kWoFyWctl]: hasVariant(
                      $state,
                      "editable",
                      "editable"
                    ),
                    [sty.imgediting__kWoFclfhW]: hasVariant(
                      $state,
                      "editing",
                      "editing"
                    ),
                    [sty.imgtype_image__kWoFzcb8B]: hasVariant(
                      $state,
                      "type",
                      "image"
                    ),
                    [sty.imgtype_image_editing__kWoFzcb8BClfhW]:
                      hasVariant($state, "editing", "editing") &&
                      hasVariant($state, "type", "image")
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  height={``}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state.curValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              <div
                className={classNames(projectcss.all, sty.freeBox__gixRl, {
                  [sty.freeBoxediting__gixRlclfhW]: hasVariant(
                    $state,
                    "editing",
                    "editing"
                  ),
                  [sty.freeBoxtype_image_editing__gixRlZcb8BClfhW]:
                    hasVariant($state, "editing", "editing") &&
                    hasVariant($state, "type", "image")
                })}
              >
                {(() => {
                  const child$Props = {
                    allowClear: true,
                    autoFocus: true,
                    bordered: true,
                    className: classNames("__wab_instance", sty.curValueInput, {
                      [sty.curValueInputediting]: hasVariant(
                        $state,
                        "editing",
                        "editing"
                      ),
                      [sty.curValueInputtype_image_editing]:
                        hasVariant($state, "editing", "editing") &&
                        hasVariant($state, "type", "image")
                    }),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["curValueInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateCurValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["curValue"]
                                },
                                operation: 0,
                                value: $state.curValueInput.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurValue"] != null &&
                          typeof $steps["updateCurValue"] === "object" &&
                          typeof $steps["updateCurValue"].then === "function"
                        ) {
                          $steps["updateCurValue"] = await $steps[
                            "updateCurValue"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    onPressEnter: async event => {
                      const $steps = {};

                      $steps["httpPut"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "u5abu9PBqZVDeR6z44y2FF",
                                opId: "3fd6cbad-3ab8-47f9-8d78-3e2a026667ed",
                                userArgs: {
                                  body: [
                                    $queries.fetchPageData.data.response.rows[0]
                                      .identifier,
                                    $props.field,
                                    $state.curValue
                                  ],
                                  path: [$props.slug]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "67e64bad-29bd-4d30-bf11-1e285071c82b"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["httpPut"] != null &&
                        typeof $steps["httpPut"] === "object" &&
                        typeof $steps["httpPut"].then === "function"
                      ) {
                        $steps["httpPut"] = await $steps["httpPut"];
                      }

                      $steps["updateEditing"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "editing",
                              operation: 6,
                              value: "editing"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEditing"] != null &&
                        typeof $steps["updateEditing"] === "object" &&
                        typeof $steps["updateEditing"].then === "function"
                      ) {
                        $steps["updateEditing"] = await $steps["updateEditing"];
                      }
                    },
                    placeholder:
                      hasVariant($state, "editing", "editing") &&
                      hasVariant($state, "type", "image")
                        ? (() => {
                            try {
                              return $state.curValue;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.curValue;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                    size: "small",
                    value: generateStateValueProp($state, [
                      "curValueInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "curValueInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"curValueInput"}
                      data-plasmic-override={overrides.curValueInput}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </div>
          ) : null}
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__xFAms, {
              [sty.imgloading__xFAmsfOShm]: hasVariant(
                $state,
                "loading",
                "loading"
              )
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"30px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/aug_22_1_ssg_app_page_generator/images/icons8DotsLoadinggif.gif",
              fullWidth: 30,
              fullHeight: 840,
              aspectRatio: undefined
            }}
          />
        </div>
      ) : null}
      {(
        hasVariant($state, "loading", "loading")
          ? true
          : (() => {
              try {
                return (
                  $queries.fetchPageData.isLoading &&
                  (typeof $state.curValue === "undefined" ||
                    $state.curValue === null ||
                    $state.curValue.length === 0)
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___7PXo, {
            [sty.freeBoxloading___7PXOfOShm]: hasVariant(
              $state,
              "loading",
              "loading"
            ),
            [sty.freeBoxtype_image___7PXozcb8B]: hasVariant(
              $state,
              "type",
              "image"
            ),
            [sty.freeBoxtype_image_loading___7PXozcb8BFOShm]:
              hasVariant($state, "loading", "loading") &&
              hasVariant($state, "type", "image")
          })}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__mKiS4)}
            displayHeight={"15px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"30px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/aug_22_1_ssg_app_page_generator/images/eCvOxPXugngif.gif",
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: undefined
            }}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Fetching Data..."}
          </div>
          <LottieWrapper
            animationData={{
              v: "5.5.8",
              fr: 29.9700012207031,
              ip: 0,
              op: 45.0000018328876,
              w: 200,
              h: 200,
              nm: "Comp 1",
              ddd: 0,
              assets: [],
              layers: [
                {
                  ddd: 0,
                  ind: 1,
                  ty: 4,
                  nm: "circle_group",
                  sr: 1,
                  ks: {
                    o: { a: 0, k: 100, ix: 11 },
                    r: { a: 0, k: 0, ix: 10 },
                    p: { a: 0, k: [100, 100, 0], ix: 2 },
                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                    s: {
                      a: 1,
                      k: [
                        {
                          i: {
                            x: [0.833, 0.833, 0.833],
                            y: [0.833, 0.833, 0.833]
                          },
                          o: {
                            x: [0.167, 0.167, 0.167],
                            y: [0.167, 0.167, 0.167]
                          },
                          t: 0,
                          s: [100, 100, 100]
                        },
                        {
                          i: {
                            x: [0.833, 0.833, 0.833],
                            y: [0.833, 0.833, 0.833]
                          },
                          o: {
                            x: [0.167, 0.167, 0.167],
                            y: [0.167, 0.167, 0.167]
                          },
                          t: 15,
                          s: [100, 100, 100]
                        },
                        {
                          i: {
                            x: [0.833, 0.833, 0.833],
                            y: [0.833, 0.833, 0.833]
                          },
                          o: {
                            x: [0.167, 0.167, 0.167],
                            y: [0.167, 0.167, 0.167]
                          },
                          t: 23,
                          s: [50, 50, 100]
                        },
                        {
                          i: {
                            x: [0.833, 0.833, 0.833],
                            y: [0.833, 0.833, 0.833]
                          },
                          o: {
                            x: [0.167, 0.167, 0.167],
                            y: [0.167, 0.167, 0.167]
                          },
                          t: 30,
                          s: [100, 100, 100]
                        },
                        { t: 45.0000018328876, s: [100, 100, 100] }
                      ],
                      ix: 6
                    }
                  },
                  ao: 0,
                  shapes: [
                    {
                      ty: "gr",
                      it: [
                        {
                          d: 1,
                          ty: "el",
                          s: { a: 0, k: [0.57, 0.926], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          nm: "Ellipse Path 1",
                          mn: "ADBE Vector Shape - Ellipse",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "st",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 3 },
                          o: { a: 0, k: 100, ix: 4 },
                          w: { a: 0, k: 0, ix: 5 },
                          lc: 1,
                          lj: 1,
                          ml: 4,
                          bm: 0,
                          nm: "Stroke 1",
                          mn: "ADBE Vector Graphic - Stroke",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 4 },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: { a: 0, k: [-277.715, -177.537], ix: 2 },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [100, 100], ix: 3 },
                          r: { a: 0, k: 0, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "Ellipse 1",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 1,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    },
                    {
                      ty: "gr",
                      it: [
                        {
                          d: 1,
                          ty: "el",
                          s: { a: 0, k: [72, 72], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          nm: "Ellipse Path 1",
                          mn: "ADBE Vector Shape - Ellipse",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "st",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 3 },
                          o: { a: 0, k: 100, ix: 4 },
                          w: { a: 0, k: 0, ix: 5 },
                          lc: 1,
                          lj: 1,
                          ml: 4,
                          bm: 0,
                          nm: "Stroke 1",
                          mn: "ADBE Vector Graphic - Stroke",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 0,
                                s: [0.5294, 0.2745, 1, 1]
                              },
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 23,
                                s: [0.6314, 0.6784, 0.7176, 1]
                              },
                              { t: 45.0000018328876, s: [0.5294, 0.2745, 1, 1] }
                            ],
                            ix: 4
                          },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: {
                            a: 1,
                            k: [
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 0,
                                s: [0, -50],
                                to: [-9.167, 16.667],
                                ti: [-9.167, -16.667]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 15,
                                s: [-55, 50],
                                to: [9.167, 16.667],
                                ti: [-9.167, 16.667]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 30,
                                s: [55, 50],
                                to: [9.167, -16.667],
                                ti: [9.167, 16.667]
                              },
                              { t: 45.0000018328876, s: [0, -50] }
                            ],
                            ix: 2
                          },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [100, 100], ix: 3 },
                          r: { a: 0, k: 0, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "circle_A",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 2,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    },
                    {
                      ty: "gr",
                      it: [
                        {
                          d: 1,
                          ty: "el",
                          s: { a: 0, k: [72, 72], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          nm: "Ellipse Path 1",
                          mn: "ADBE Vector Shape - Ellipse",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "st",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 3 },
                          o: { a: 0, k: 100, ix: 4 },
                          w: { a: 0, k: 0, ix: 5 },
                          lc: 1,
                          lj: 1,
                          ml: 4,
                          bm: 0,
                          nm: "Stroke 1",
                          mn: "ADBE Vector Graphic - Stroke",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 0,
                                s: [0.5294, 0.2745, 1, 1]
                              },
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 23,
                                s: [0.6314, 0.6784, 0.7176, 1]
                              },
                              { t: 45.0000018328876, s: [0.5294, 0.2745, 1, 1] }
                            ],
                            ix: 4
                          },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: {
                            a: 1,
                            k: [
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 0,
                                s: [-55, 50],
                                to: [18.333, 0],
                                ti: [-9.167, 16.667]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 15,
                                s: [55, 50],
                                to: [9.167, -16.667],
                                ti: [18.333, 0]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 30,
                                s: [0, -50],
                                to: [-18.333, 0],
                                ti: [9.167, -16.667]
                              },
                              { t: 45.0000018328876, s: [-55, 50] }
                            ],
                            ix: 2
                          },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [100, 100], ix: 3 },
                          r: { a: 0, k: 0, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "circle_B",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 3,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    },
                    {
                      ty: "gr",
                      it: [
                        {
                          d: 1,
                          ty: "el",
                          s: { a: 0, k: [72, 72], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          nm: "Ellipse Path 1",
                          mn: "ADBE Vector Shape - Ellipse",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "st",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 3 },
                          o: { a: 0, k: 100, ix: 4 },
                          w: { a: 0, k: 0, ix: 5 },
                          lc: 1,
                          lj: 1,
                          ml: 4,
                          bm: 0,
                          nm: "Stroke 1",
                          mn: "ADBE Vector Graphic - Stroke",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 0,
                                s: [0.5294, 0.2745, 1, 1]
                              },
                              {
                                i: { x: [0.667], y: [1] },
                                o: { x: [0.333], y: [0] },
                                t: 23,
                                s: [0.6314, 0.6784, 0.7176, 1]
                              },
                              { t: 45.0000018328876, s: [0.5294, 0.2745, 1, 1] }
                            ],
                            ix: 4
                          },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: {
                            a: 1,
                            k: [
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 0,
                                s: [55, 50],
                                to: [-9.167, -16.667],
                                ti: [18.333, 0]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 15,
                                s: [0, -50],
                                to: [-18.333, 0],
                                ti: [-9.167, -16.667]
                              },
                              {
                                i: { x: 0.667, y: 1 },
                                o: { x: 0.333, y: 0 },
                                t: 30,
                                s: [-55, 50],
                                to: [9.167, 16.667],
                                ti: [-18.333, 0]
                              },
                              { t: 45.0000018328876, s: [55, 50] }
                            ],
                            ix: 2
                          },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [100, 100], ix: 3 },
                          r: { a: 0, k: 0, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "circle_C",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 4,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    }
                  ],
                  ip: 0,
                  op: 900.000036657751,
                  st: 0,
                  bm: 0,
                  completed: true
                }
              ],
              markers: [],
              __complete: true
            }}
            className={classNames("__wab_instance", sty.lottie__jz4Ry)}
            preview={true}
          />

          <LottieWrapper
            animationData={{
              v: "5.5.7",
              meta: {
                g: "LottieFiles AE 0.1.20",
                a: "Randy Varianda",
                k: "",
                d: "",
                tc: ""
              },
              fr: 16,
              ip: 0,
              op: 32,
              w: 128,
              h: 128,
              nm: "Lazy Load",
              ddd: 0,
              assets: [],
              layers: [
                {
                  ddd: 0,
                  ind: 1,
                  ty: 4,
                  nm: "Shape Layer 2",
                  sr: 1,
                  ks: {
                    o: { a: 0, k: 100, ix: 11 },
                    r: { a: 0, k: 0, ix: 10 },
                    p: {
                      a: 1,
                      k: [
                        {
                          i: { x: 0.667, y: 1 },
                          o: { x: 0.333, y: 0 },
                          t: 0,
                          s: [-11.5, 49, 0],
                          to: [36.083, 9.667, 0],
                          ti: [-0.25, -0.083, 0]
                        },
                        {
                          i: { x: 0.833, y: 0.833 },
                          o: { x: 0.333, y: 0 },
                          t: 40,
                          s: [204.99999999999997, 107, 0],
                          to: [0.25, 0.083, 0],
                          ti: [35.833, 9.583, 0]
                        },
                        { t: 59, s: [-10, 49.5, 0] }
                      ],
                      ix: 2
                    },
                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                    s: { a: 0, k: [179.208, 93.896, 100], ix: 6 }
                  },
                  ao: 0,
                  ef: [
                    {
                      ty: 29,
                      nm: "Gaussian Blur",
                      np: 5,
                      mn: "ADBE Gaussian Blur 2",
                      ix: 1,
                      en: 1,
                      ef: [
                        {
                          ty: 0,
                          nm: "Blurriness",
                          mn: "ADBE Gaussian Blur 2-0001",
                          ix: 1,
                          v: { a: 0, k: 34.3, ix: 1 }
                        },
                        {
                          ty: 7,
                          nm: "Blur Dimensions",
                          mn: "ADBE Gaussian Blur 2-0002",
                          ix: 2,
                          v: { a: 0, k: 1, ix: 2 }
                        },
                        {
                          ty: 7,
                          nm: "Repeat Edge Pixels",
                          mn: "ADBE Gaussian Blur 2-0003",
                          ix: 3,
                          v: { a: 0, k: 0, ix: 3 }
                        }
                      ]
                    }
                  ],
                  shapes: [
                    {
                      ty: "gr",
                      it: [
                        {
                          ty: "rc",
                          d: 1,
                          s: { a: 0, k: [7.721, 144.227], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          r: { a: 0, k: 0, ix: 4 },
                          nm: "Rectangle Path 1",
                          mn: "ADBE Vector Shape - Rect",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: { a: 0, k: [0.732, 0.8045, 0.868, 1], ix: 4 },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: { a: 0, k: [-18.46, 3.373], ix: 2 },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [100, 146.624], ix: 3 },
                          r: { a: 0, k: 20.495, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "Rectangle 1",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 1,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    }
                  ],
                  ip: 0,
                  op: 40,
                  st: 0,
                  bm: 0,
                  completed: true
                },
                {
                  ddd: 0,
                  ind: 2,
                  ty: 4,
                  nm: "Shape Layer 1",
                  sr: 1,
                  ks: {
                    o: { a: 0, k: 100, ix: 11 },
                    r: { a: 0, k: 0, ix: 10 },
                    p: { a: 0, k: [62.458000000000006, 55.823, 0], ix: 2 },
                    a: { a: 0, k: [0, 0, 0], ix: 1 },
                    s: { a: 0, k: [100, 100, 100], ix: 6 }
                  },
                  ao: 0,
                  shapes: [
                    {
                      ty: "gr",
                      it: [
                        {
                          ty: "rc",
                          d: 1,
                          s: { a: 0, k: [120.328, 77.977], ix: 2 },
                          p: { a: 0, k: [0, 0], ix: 3 },
                          r: { a: 0, k: 0, ix: 4 },
                          nm: "Rectangle Path 1",
                          mn: "ADBE Vector Shape - Rect",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "fl",
                          c: { a: 0, k: [0.851, 0.8784, 0.902, 1], ix: 4 },
                          o: { a: 0, k: 100, ix: 5 },
                          r: 1,
                          bm: 0,
                          nm: "Fill 1",
                          mn: "ADBE Vector Graphic - Fill",
                          hd: false,
                          _render: true
                        },
                        {
                          ty: "tr",
                          p: { a: 0, k: [1.542, 8.177], ix: 2 },
                          a: { a: 0, k: [0, 0], ix: 1 },
                          s: { a: 0, k: [109.644, 176.784], ix: 3 },
                          r: { a: 0, k: 0, ix: 6 },
                          o: { a: 0, k: 100, ix: 7 },
                          sk: { a: 0, k: 0, ix: 4 },
                          sa: { a: 0, k: 0, ix: 5 },
                          nm: "Transform",
                          _render: true
                        }
                      ],
                      nm: "Rectangle 1",
                      np: 3,
                      cix: 2,
                      bm: 0,
                      ix: 1,
                      mn: "ADBE Vector Group",
                      hd: false,
                      _render: true
                    }
                  ],
                  ip: 0,
                  op: 40,
                  st: 0,
                  bm: 0,
                  completed: true
                }
              ],
              markers: [],
              __complete: true
            }}
            className={classNames("__wab_instance", sty.lottie__f4Xul, {
              [sty.lottieloading__f4XulfOShm]: hasVariant(
                $state,
                "loading",
                "loading"
              ),
              [sty.lottietype_image__f4XulZcb8B]: hasVariant(
                $state,
                "type",
                "image"
              ),
              [sty.lottietype_image_loading__f4XulZcb8BFOShm]:
                hasVariant($state, "loading", "loading") &&
                hasVariant($state, "type", "image")
            })}
            preview={true}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "curValueHolder", "curValueInput", "text"],
  svg: ["svg"],
  curValueHolder: ["curValueHolder"],
  curValueInput: ["curValueInput"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  curValueHolder: "div";
  curValueInput: typeof AntdInput;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCmsEntryEditableField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCmsEntryEditableField__VariantsArgs;
    args?: PlasmicCmsEntryEditableField__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCmsEntryEditableField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCmsEntryEditableField__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCmsEntryEditableField__ArgProps,
          internalVariantPropNames: PlasmicCmsEntryEditableField__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCmsEntryEditableField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCmsEntryEditableField";
  } else {
    func.displayName = `PlasmicCmsEntryEditableField.${nodeName}`;
  }
  return func;
}

export const PlasmicCmsEntryEditableField = Object.assign(
  // Top-level PlasmicCmsEntryEditableField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    curValueHolder: makeNodeComponent("curValueHolder"),
    curValueInput: makeNodeComponent("curValueInput"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCmsEntryEditableField
    internalVariantProps: PlasmicCmsEntryEditableField__VariantProps,
    internalArgProps: PlasmicCmsEntryEditableField__ArgProps
  }
);

export default PlasmicCmsEntryEditableField;
/* prettier-ignore-end */
