// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aQ9D2JdX7H1bg1rqtUnJBi
// Component: 6-6CHHuzBgUc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import CmsEntryEditableField from "../../CmsEntryEditableField"; // plasmic-import: NTEUV05d7zGG/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbd0VuldR44F } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Bd0VuldR44F_/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aQ9D2JdX7H1bg1rqtUnJBi/projectcss
import sty from "./PlasmicSqueezePlasmicCmsHypernova2.module.css"; // plasmic-import: 6-6CHHuzBgUc/css

createPlasmicElementProxy;

export type PlasmicSqueezePlasmicCmsHypernova2__VariantMembers = {};
export type PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
export const PlasmicSqueezePlasmicCmsHypernova2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSqueezePlasmicCmsHypernova2__ArgsType = {
  slug?: string;
};
type ArgPropType = keyof PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
export const PlasmicSqueezePlasmicCmsHypernova2__ArgProps =
  new Array<ArgPropType>("slug");

export type PlasmicSqueezePlasmicCmsHypernova2__OverridesType = {
  root?: Flex__<"div">;
  leftColumn?: Flex__<"div">;
  logo2?: Flex__<typeof CmsEntryEditableField>;
  rightColumnMobileOnly?: Flex__<"div">;
  image14?: Flex__<typeof CmsEntryEditableField>;
  text74?: Flex__<typeof CmsEntryEditableField>;
  text84?: Flex__<typeof CmsEntryEditableField>;
  iconValue12?: Flex__<"div">;
  image23?: Flex__<typeof CmsEntryEditableField>;
  text93?: Flex__<typeof CmsEntryEditableField>;
  image33?: Flex__<typeof CmsEntryEditableField>;
  text103?: Flex__<typeof CmsEntryEditableField>;
  image43?: Flex__<typeof CmsEntryEditableField>;
  text113?: Flex__<typeof CmsEntryEditableField>;
  text14?: Flex__<typeof CmsEntryEditableField>;
  text23?: Flex__<typeof CmsEntryEditableField>;
  text32?: Flex__<typeof CmsEntryEditableField>;
  form?: Flex__<"div">;
  input3?: Flex__<"input">;
  input1?: Flex__<"input">;
  input2?: Flex__<"input">;
  button?: Flex__<"button">;
  text6?: Flex__<"div">;
  text24?: Flex__<typeof CmsEntryEditableField>;
  terms?: Flex__<"div">;
  spacer?: Flex__<"div">;
  disclaimer5?: Flex__<"div">;
  step2?: Flex__<"div">;
  text15?: Flex__<typeof CmsEntryEditableField>;
  text25?: Flex__<typeof CmsEntryEditableField>;
  text33?: Flex__<typeof CmsEntryEditableField>;
  text62?: Flex__<"div">;
  text26?: Flex__<typeof CmsEntryEditableField>;
  scheduler?: Flex__<typeof Embed>;
  rightColumnDesktopOnly?: Flex__<"div">;
  image13?: Flex__<typeof CmsEntryEditableField>;
  text73?: Flex__<typeof CmsEntryEditableField>;
  text83?: Flex__<typeof CmsEntryEditableField>;
  iconValue11?: Flex__<"div">;
  image22?: Flex__<typeof CmsEntryEditableField>;
  text92?: Flex__<typeof CmsEntryEditableField>;
  image32?: Flex__<typeof CmsEntryEditableField>;
  text102?: Flex__<typeof CmsEntryEditableField>;
  image42?: Flex__<typeof CmsEntryEditableField>;
  text112?: Flex__<typeof CmsEntryEditableField>;
  metaPixel?: Flex__<typeof Embed>;
};

export interface DefaultSqueezePlasmicCmsHypernova2Props {
  slug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezePlasmicCmsHypernova2__RenderFunc(props: {
  variants: PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
  args: PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
  overrides: PlasmicSqueezePlasmicCmsHypernova2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "submitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "fill",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    cms: usePlasmicDataOp(() => {
      return {
        sourceId: "feqv2xxUVDgpmz5wctFzXi",
        opId: "67e64bad-29bd-4d30-bf11-1e285071c82b",
        userArgs: {
          params: [
            JSON.stringify({
              where: { _id: $props.slug },
              limit: 1,
              offset: 0
            })
          ]
        },
        cacheKey: `plasmic.$.67e64bad-29bd-4d30-bf11-1e285071c82b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbd0VuldR44F()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tMrOs)}>
        <div
          data-plasmic-name={"leftColumn"}
          data-plasmic-override={overrides.leftColumn}
          className={classNames(projectcss.all, sty.leftColumn)}
        >
          <CmsEntryEditableField
            data-plasmic-name={"logo2"}
            data-plasmic-override={overrides.logo2}
            className={classNames("__wab_instance", sty.logo2)}
            editable={true}
            field={"logo"}
            slug={args.slug}
            type={"image"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"rightColumnMobileOnly"}
              data-plasmic-override={overrides.rightColumnMobileOnly}
              className={classNames(projectcss.all, sty.rightColumnMobileOnly)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___0Lmgh)}>
                <CmsEntryEditableField
                  data-plasmic-name={"image14"}
                  data-plasmic-override={overrides.image14}
                  borderRadius={"_10Px"}
                  className={classNames("__wab_instance", sty.image14)}
                  field={"image1"}
                  slug={args.slug}
                  type={"image"}
                />

                <div className={classNames(projectcss.all, sty.freeBox__l2GY)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"text74"}
                    data-plasmic-override={overrides.text74}
                    className={classNames("__wab_instance", sty.text74)}
                    field={"text7"}
                    fontSize={"_25Px"}
                    fontWeight={"bold"}
                    slug={args.slug}
                    type={"text"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text84"}
                    data-plasmic-override={overrides.text84}
                    className={classNames("__wab_instance", sty.text84)}
                    color={"darkGrey"}
                    field={"text8"}
                    fontSize={"_16Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___4N7BK)}
              />

              <div
                data-plasmic-name={"iconValue12"}
                data-plasmic-override={overrides.iconValue12}
                className={classNames(projectcss.all, sty.iconValue12)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___36Dju)}
                >
                  <CmsEntryEditableField
                    data-plasmic-name={"image23"}
                    data-plasmic-override={overrides.image23}
                    className={classNames("__wab_instance", sty.image23)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text93"}
                    data-plasmic-override={overrides.text93}
                    className={classNames("__wab_instance", sty.text93)}
                    color={"darkGrey"}
                    field={"text9"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iXaAo)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"image33"}
                    data-plasmic-override={overrides.image33}
                    className={classNames("__wab_instance", sty.image33)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text103"}
                    data-plasmic-override={overrides.text103}
                    className={classNames("__wab_instance", sty.text103)}
                    color={"darkGrey"}
                    field={"text10"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jSx0)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"image43"}
                    data-plasmic-override={overrides.image43}
                    className={classNames("__wab_instance", sty.image43)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text113"}
                    data-plasmic-override={overrides.text113}
                    className={classNames("__wab_instance", sty.text113)}
                    color={"darkGrey"}
                    field={"text11"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__gyek6)} />
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $state?.submitted == false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <CmsEntryEditableField
              data-plasmic-name={"text14"}
              data-plasmic-override={overrides.text14}
              className={classNames("__wab_instance", sty.text14)}
              editable={true}
              field={"text1"}
              slug={args.slug}
              type={"text"}
            />
          ) : null}
          {(() => {
            try {
              return $state?.submitted == false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <CmsEntryEditableField
              data-plasmic-name={"text23"}
              data-plasmic-override={overrides.text23}
              className={classNames("__wab_instance", sty.text23)}
              color={"black"}
              editable={true}
              field={"text2"}
              fontSize={"_22Px"}
              fontWeight={"medium"}
              slug={args.slug}
              type={"text"}
            />
          ) : null}
          {(() => {
            try {
              return $state?.submitted == false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <CmsEntryEditableField
              data-plasmic-name={"text32"}
              data-plasmic-override={overrides.text32}
              className={classNames("__wab_instance", sty.text32)}
              color={"black"}
              editable={true}
              field={"text3"}
              fontSize={"_16Px"}
              fontWeight={"normal"}
              slug={args.slug}
              type={"text"}
            />
          ) : null}
          {(() => {
            try {
              return $state.submitted == false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              className={classNames(projectcss.all, sty.form)}
            >
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text14 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <input
                  data-plasmic-name={"input3"}
                  data-plasmic-override={overrides.input3}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.input3
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["input3", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateFill"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["fill"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFill"] != null &&
                        typeof $steps["updateFill"] === "object" &&
                        typeof $steps["updateFill"].then === "function"
                      ) {
                        $steps["updateFill"] = await $steps["updateFill"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $queries.cms.data.response.rows[0].data.text14;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ref={ref => {
                    $refs["input3"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["input3", "value"]) ?? ""
                  }
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text12 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <input
                  data-plasmic-name={"input1"}
                  data-plasmic-override={overrides.input1}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.input1
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["input1", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateFill"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["fill"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFill"] != null &&
                        typeof $steps["updateFill"] === "object" &&
                        typeof $steps["updateFill"].then === "function"
                      ) {
                        $steps["updateFill"] = await $steps["updateFill"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $queries.cms.data.response.rows[0].data.text12;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ref={ref => {
                    $refs["input1"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["input1", "value"]) ?? ""
                  }
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text13 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <input
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.input2
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["input2", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateFill"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["fill"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFill"] != null &&
                        typeof $steps["updateFill"] === "object" &&
                        typeof $steps["updateFill"].then === "function"
                      ) {
                        $steps["updateFill"] = await $steps["updateFill"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $queries.cms.data.response.rows[0].data.text13;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ref={ref => {
                    $refs["input2"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["input2", "value"]) ?? ""
                  }
                />
              ) : null}
              {(() => {
                try {
                  return $state?.submitted == false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.button
                  )}
                  disabled={(() => {
                    try {
                      return $state.fill == false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const fbpixel =
                                  document.createElement("script");
                                fbpixel.textContent =
                                  "console.log('Facebook Pixel script is about to run...'); fbq('track', 'Lead'); console.log('Facebook Pixel script ran successfully.');";
                                return document.body.appendChild(fbpixel);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateSubmitted"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["submitted"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSubmitted"] != null &&
                      typeof $steps["updateSubmitted"] === "object" &&
                      typeof $steps["updateSubmitted"].then === "function"
                    ) {
                      $steps["updateSubmitted"] = await $steps[
                        "updateSubmitted"
                      ];
                    }

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (async () => {
                                function getFormData() {
                                  const formData = new FormData();
                                  formData.append(
                                    "input1",
                                    $state.input1.value
                                  );
                                  formData.append(
                                    "input2",
                                    $state.input2.value
                                  );
                                  formData.append(
                                    "input3",
                                    $state.input3.value
                                  );
                                  formData.append("slug", $props.slug);
                                  return formData;
                                }
                                async function handleSuccess(response) {
                                  const jsonResponse = await response.json();
                                  if (
                                    jsonResponse.hasOwnProperty("redirectURL")
                                  ) {
                                    window.location.href =
                                      jsonResponse.redirectURL;
                                  } else {
                                    console.error(
                                      "RedirectURL not found in response."
                                    );
                                  }
                                  return "Success";
                                }
                                function handleError() {
                                  console.log("Error");
                                  return "There was an error. Please try again.";
                                }
                                async function submit() {
                                  try {
                                    const formData = getFormData();
                                    const response = await fetch(
                                      "https://hook.us1.make.com/laqs2y2si6ynbr46i65pllpc8lp18lkw",
                                      {
                                        method: "POST",
                                        body: formData
                                      }
                                    );
                                    return handleSuccess(response);
                                  } catch (err) {
                                    return handleError();
                                  }
                                }
                                return submit()
                                  .then(response => {
                                    console.log(response);
                                  })
                                  .catch(error => {
                                    console.error(error);
                                  });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"text6"}
                    data-plasmic-override={overrides.text6}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text6
                    )}
                  >
                    {"Submit Now"}
                  </div>
                  <CmsEntryEditableField
                    data-plasmic-name={"text24"}
                    data-plasmic-override={overrides.text24}
                    className={classNames("__wab_instance", sty.text24)}
                    color={"white"}
                    editable={true}
                    field={"text6"}
                    fontSize={"_22Px"}
                    fontWeight={"medium"}
                    slug={args.slug}
                    type={"text"}
                  />
                </button>
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return $state?.submitted == false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"terms"}
              data-plasmic-override={overrides.terms}
              className={classNames(projectcss.all, sty.terms)}
            >
              <div
                data-plasmic-name={"spacer"}
                data-plasmic-override={overrides.spacer}
                className={classNames(projectcss.all, sty.spacer)}
              />

              <div
                data-plasmic-name={"disclaimer5"}
                data-plasmic-override={overrides.disclaimer5}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.disclaimer5
                )}
              >
                {
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                }
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.submitted == true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"step2"}
              data-plasmic-override={overrides.step2}
              className={classNames(projectcss.all, sty.step2)}
            >
              <CmsEntryEditableField
                data-plasmic-name={"text15"}
                data-plasmic-override={overrides.text15}
                className={classNames("__wab_instance", sty.text15)}
                editable={true}
                field={"text1"}
                slug={args.slug}
                type={"text"}
              />

              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text15 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <CmsEntryEditableField
                  data-plasmic-name={"text25"}
                  data-plasmic-override={overrides.text25}
                  className={classNames("__wab_instance", sty.text25)}
                  color={"black"}
                  editable={true}
                  field={"text15"}
                  fontSize={"_22Px"}
                  fontWeight={"medium"}
                  slug={args.slug}
                  type={"text"}
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text16 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <CmsEntryEditableField
                  data-plasmic-name={"text33"}
                  data-plasmic-override={overrides.text33}
                  className={classNames("__wab_instance", sty.text33)}
                  color={"black"}
                  editable={true}
                  field={"text16"}
                  fontSize={"_16Px"}
                  fontWeight={"normal"}
                  slug={args.slug}
                  type={"text"}
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.text17 != undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__bd3Wk)}
                  onClick={async event => {
                    const $steps = {};
                  }}
                >
                  <div
                    data-plasmic-name={"text62"}
                    data-plasmic-override={overrides.text62}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text62
                    )}
                  >
                    {"Submit Now"}
                  </div>
                  <CmsEntryEditableField
                    data-plasmic-name={"text26"}
                    data-plasmic-override={overrides.text26}
                    className={classNames("__wab_instance", sty.text26)}
                    color={"white"}
                    editable={true}
                    field={"text17"}
                    fontSize={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "_16Px"
                        : "_22Px"
                    }
                    fontWeight={"medium"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.cms.data.response.rows[0].data.scheduler !=
                    undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Embed
                  data-plasmic-name={"scheduler"}
                  data-plasmic-override={overrides.scheduler}
                  className={classNames("__wab_instance", sty.scheduler)}
                  code={(() => {
                    try {
                      return $queries.cms.data.response.rows[0].data.scheduler;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
          ) : null}
        </div>
        <div
          data-plasmic-name={"rightColumnDesktopOnly"}
          data-plasmic-override={overrides.rightColumnDesktopOnly}
          className={classNames(projectcss.all, sty.rightColumnDesktopOnly)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__eh3UQ)}>
            <CmsEntryEditableField
              data-plasmic-name={"image13"}
              data-plasmic-override={overrides.image13}
              borderRadius={"_10Px"}
              className={classNames("__wab_instance", sty.image13)}
              editable={true}
              field={"image1"}
              slug={args.slug}
              type={"image"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__xHhCd)}>
              <CmsEntryEditableField
                data-plasmic-name={"text73"}
                data-plasmic-override={overrides.text73}
                className={classNames("__wab_instance", sty.text73)}
                editable={true}
                field={"text7"}
                fontSize={"_25Px"}
                fontWeight={"bold"}
                slug={args.slug}
                type={"text"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text83"}
                data-plasmic-override={overrides.text83}
                className={classNames("__wab_instance", sty.text83)}
                color={"darkGrey"}
                editable={true}
                field={"text8"}
                fontSize={"_16Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__euTF)} />

          <div
            data-plasmic-name={"iconValue11"}
            data-plasmic-override={overrides.iconValue11}
            className={classNames(projectcss.all, sty.iconValue11)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__nOLw)}>
              <CmsEntryEditableField
                data-plasmic-name={"image22"}
                data-plasmic-override={overrides.image22}
                className={classNames("__wab_instance", sty.image22)}
                editable={true}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text92"}
                data-plasmic-override={overrides.text92}
                className={classNames("__wab_instance", sty.text92)}
                color={"darkGrey"}
                editable={true}
                field={"text9"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rzQnM)}>
              <CmsEntryEditableField
                data-plasmic-name={"image32"}
                data-plasmic-override={overrides.image32}
                className={classNames("__wab_instance", sty.image32)}
                editable={true}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text102"}
                data-plasmic-override={overrides.text102}
                className={classNames("__wab_instance", sty.text102)}
                color={"darkGrey"}
                editable={true}
                field={"text10"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uL9SM)}>
              <CmsEntryEditableField
                data-plasmic-name={"image42"}
                data-plasmic-override={overrides.image42}
                className={classNames("__wab_instance", sty.image42)}
                editable={true}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text112"}
                data-plasmic-override={overrides.text112}
                className={classNames("__wab_instance", sty.text112)}
                color={"darkGrey"}
                editable={true}
                field={"text11"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___91Bf6)} />
        </div>
      </div>
      {(() => {
        try {
          return $queries.cms.data.response.rows[0].data.metapixel != undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Embed
          data-plasmic-name={"metaPixel"}
          data-plasmic-override={overrides.metaPixel}
          className={classNames("__wab_instance", sty.metaPixel)}
          code={(() => {
            try {
              return $queries.cms.data.response.rows[0].data.metapixel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftColumn",
    "logo2",
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113",
    "text14",
    "text23",
    "text32",
    "form",
    "input3",
    "input1",
    "input2",
    "button",
    "text6",
    "text24",
    "terms",
    "spacer",
    "disclaimer5",
    "step2",
    "text15",
    "text25",
    "text33",
    "text62",
    "text26",
    "scheduler",
    "rightColumnDesktopOnly",
    "image13",
    "text73",
    "text83",
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112",
    "metaPixel"
  ],
  leftColumn: [
    "leftColumn",
    "logo2",
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113",
    "text14",
    "text23",
    "text32",
    "form",
    "input3",
    "input1",
    "input2",
    "button",
    "text6",
    "text24",
    "terms",
    "spacer",
    "disclaimer5",
    "step2",
    "text15",
    "text25",
    "text33",
    "text62",
    "text26",
    "scheduler"
  ],
  logo2: ["logo2"],
  rightColumnMobileOnly: [
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113"
  ],
  image14: ["image14"],
  text74: ["text74"],
  text84: ["text84"],
  iconValue12: [
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113"
  ],
  image23: ["image23"],
  text93: ["text93"],
  image33: ["image33"],
  text103: ["text103"],
  image43: ["image43"],
  text113: ["text113"],
  text14: ["text14"],
  text23: ["text23"],
  text32: ["text32"],
  form: ["form", "input3", "input1", "input2", "button", "text6", "text24"],
  input3: ["input3"],
  input1: ["input1"],
  input2: ["input2"],
  button: ["button", "text6", "text24"],
  text6: ["text6"],
  text24: ["text24"],
  terms: ["terms", "spacer", "disclaimer5"],
  spacer: ["spacer"],
  disclaimer5: ["disclaimer5"],
  step2: [
    "step2",
    "text15",
    "text25",
    "text33",
    "text62",
    "text26",
    "scheduler"
  ],
  text15: ["text15"],
  text25: ["text25"],
  text33: ["text33"],
  text62: ["text62"],
  text26: ["text26"],
  scheduler: ["scheduler"],
  rightColumnDesktopOnly: [
    "rightColumnDesktopOnly",
    "image13",
    "text73",
    "text83",
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112"
  ],
  image13: ["image13"],
  text73: ["text73"],
  text83: ["text83"],
  iconValue11: [
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112"
  ],
  image22: ["image22"],
  text92: ["text92"],
  image32: ["image32"],
  text102: ["text102"],
  image42: ["image42"],
  text112: ["text112"],
  metaPixel: ["metaPixel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftColumn: "div";
  logo2: typeof CmsEntryEditableField;
  rightColumnMobileOnly: "div";
  image14: typeof CmsEntryEditableField;
  text74: typeof CmsEntryEditableField;
  text84: typeof CmsEntryEditableField;
  iconValue12: "div";
  image23: typeof CmsEntryEditableField;
  text93: typeof CmsEntryEditableField;
  image33: typeof CmsEntryEditableField;
  text103: typeof CmsEntryEditableField;
  image43: typeof CmsEntryEditableField;
  text113: typeof CmsEntryEditableField;
  text14: typeof CmsEntryEditableField;
  text23: typeof CmsEntryEditableField;
  text32: typeof CmsEntryEditableField;
  form: "div";
  input3: "input";
  input1: "input";
  input2: "input";
  button: "button";
  text6: "div";
  text24: typeof CmsEntryEditableField;
  terms: "div";
  spacer: "div";
  disclaimer5: "div";
  step2: "div";
  text15: typeof CmsEntryEditableField;
  text25: typeof CmsEntryEditableField;
  text33: typeof CmsEntryEditableField;
  text62: "div";
  text26: typeof CmsEntryEditableField;
  scheduler: typeof Embed;
  rightColumnDesktopOnly: "div";
  image13: typeof CmsEntryEditableField;
  text73: typeof CmsEntryEditableField;
  text83: typeof CmsEntryEditableField;
  iconValue11: "div";
  image22: typeof CmsEntryEditableField;
  text92: typeof CmsEntryEditableField;
  image32: typeof CmsEntryEditableField;
  text102: typeof CmsEntryEditableField;
  image42: typeof CmsEntryEditableField;
  text112: typeof CmsEntryEditableField;
  metaPixel: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezePlasmicCmsHypernova2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
    args?: PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezePlasmicCmsHypernova2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSqueezePlasmicCmsHypernova2__ArgProps,
          internalVariantPropNames:
            PlasmicSqueezePlasmicCmsHypernova2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezePlasmicCmsHypernova2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezePlasmicCmsHypernova2";
  } else {
    func.displayName = `PlasmicSqueezePlasmicCmsHypernova2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezePlasmicCmsHypernova2 = Object.assign(
  // Top-level PlasmicSqueezePlasmicCmsHypernova2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftColumn: makeNodeComponent("leftColumn"),
    logo2: makeNodeComponent("logo2"),
    rightColumnMobileOnly: makeNodeComponent("rightColumnMobileOnly"),
    image14: makeNodeComponent("image14"),
    text74: makeNodeComponent("text74"),
    text84: makeNodeComponent("text84"),
    iconValue12: makeNodeComponent("iconValue12"),
    image23: makeNodeComponent("image23"),
    text93: makeNodeComponent("text93"),
    image33: makeNodeComponent("image33"),
    text103: makeNodeComponent("text103"),
    image43: makeNodeComponent("image43"),
    text113: makeNodeComponent("text113"),
    text14: makeNodeComponent("text14"),
    text23: makeNodeComponent("text23"),
    text32: makeNodeComponent("text32"),
    form: makeNodeComponent("form"),
    input3: makeNodeComponent("input3"),
    input1: makeNodeComponent("input1"),
    input2: makeNodeComponent("input2"),
    button: makeNodeComponent("button"),
    text6: makeNodeComponent("text6"),
    text24: makeNodeComponent("text24"),
    terms: makeNodeComponent("terms"),
    spacer: makeNodeComponent("spacer"),
    disclaimer5: makeNodeComponent("disclaimer5"),
    step2: makeNodeComponent("step2"),
    text15: makeNodeComponent("text15"),
    text25: makeNodeComponent("text25"),
    text33: makeNodeComponent("text33"),
    text62: makeNodeComponent("text62"),
    text26: makeNodeComponent("text26"),
    scheduler: makeNodeComponent("scheduler"),
    rightColumnDesktopOnly: makeNodeComponent("rightColumnDesktopOnly"),
    image13: makeNodeComponent("image13"),
    text73: makeNodeComponent("text73"),
    text83: makeNodeComponent("text83"),
    iconValue11: makeNodeComponent("iconValue11"),
    image22: makeNodeComponent("image22"),
    text92: makeNodeComponent("text92"),
    image32: makeNodeComponent("image32"),
    text102: makeNodeComponent("text102"),
    image42: makeNodeComponent("image42"),
    text112: makeNodeComponent("text112"),
    metaPixel: makeNodeComponent("metaPixel"),

    // Metadata about props expected for PlasmicSqueezePlasmicCmsHypernova2
    internalVariantProps: PlasmicSqueezePlasmicCmsHypernova2__VariantProps,
    internalArgProps: PlasmicSqueezePlasmicCmsHypernova2__ArgProps
  }
);

export default PlasmicSqueezePlasmicCmsHypernova2;
/* prettier-ignore-end */
