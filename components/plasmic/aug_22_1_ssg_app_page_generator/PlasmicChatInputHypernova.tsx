// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aQ9D2JdX7H1bg1rqtUnJBi
// Component: qxzVzpCa7tUp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: r4p54ucD4KSM/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: aQ9D2JdX7H1bg1rqtUnJBi/projectcss
import sty from "./PlasmicChatInputHypernova.module.css"; // plasmic-import: qxzVzpCa7tUp/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: kYCe8-7UDzPB/icon
import UpArrowSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__UpArrowSvgrepoCom2Svg"; // plasmic-import: M7t-AbMXtX40/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dDEIHBDB5O8s/icon
import AttachSvgrepoComsvgIcon from "./icons/PlasmicIcon__AttachSvgrepoComsvg"; // plasmic-import: vFl-3CM3tSyM/icon

createPlasmicElementProxy;

export type PlasmicChatInputHypernova__VariantMembers = {
  submitting: "submitting";
};
export type PlasmicChatInputHypernova__VariantsArgs = {
  submitting?: SingleBooleanChoiceArg<"submitting">;
};
type VariantPropType = keyof PlasmicChatInputHypernova__VariantsArgs;
export const PlasmicChatInputHypernova__VariantProps =
  new Array<VariantPropType>("submitting");

export type PlasmicChatInputHypernova__ArgsType = {
  textValue?: string;
  onTextValueChange?: (val: string) => void;
  fileValues?: any;
  onFileValuesChange?: (val: any) => void;
  onSubmit?: (event: any) => void;
  placeholder?: string;
};
type ArgPropType = keyof PlasmicChatInputHypernova__ArgsType;
export const PlasmicChatInputHypernova__ArgProps = new Array<ArgPropType>(
  "textValue",
  "onTextValueChange",
  "fileValues",
  "onFileValuesChange",
  "onSubmit",
  "placeholder"
);

export type PlasmicChatInputHypernova__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  textarea?: Flex__<"textarea">;
  upload?: Flex__<typeof UploadWrapper>;
};

export interface DefaultChatInputHypernovaProps {
  textValue?: string;
  onTextValueChange?: (val: string) => void;
  fileValues?: any;
  onFileValuesChange?: (val: any) => void;
  onSubmit?: (event: any) => void;
  placeholder?: string;
  submitting?: SingleBooleanChoiceArg<"submitting">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChatInputHypernova__RenderFunc(props: {
  variants: PlasmicChatInputHypernova__VariantsArgs;
  args: PlasmicChatInputHypernova__ArgsType;
  overrides: PlasmicChatInputHypernova__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "Message Devyn"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "writable",
        variableType: "text",

        valueProp: "textValue",
        onChangeProp: "onTextValueChange"
      },
      {
        path: "upload.files",
        type: "writable",
        variableType: "array",

        valueProp: "fileValues",
        onChangeProp: "onFileValuesChange"
      },
      {
        path: "submitting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.submitting
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root,
        { [sty.rootsubmitting]: hasVariant($state, "submitting", "submitting") }
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          '<script>\n  function docReady(fn) {\n      // see if DOM is already available\n      if (document.readyState === "complete" || document.readyState === "interactive") {\n          // call on next available tick\n          setTimeout(fn, 1);\n      } else {\n          document.addEventListener("DOMContentLoaded", fn);\n      }\n  } \n\n  docReady(function () {\n      const tx = document.getElementsByTagName("textarea");\n      for (let i = 0; i < tx.length; i++) {\n        tx[i].setAttribute("style", "height:" + (tx[i].scrollHeight) + "px");\n        tx[i].addEventListener("input", OnInput, false);\n      }\n\n      function OnInput() {\n      console.log("Setting input height to scrollheight")\n        this.style.height = \'auto\';\n        this.style.height = (this.scrollHeight) + "px";\n      }\n\n      const els = document.getElementsByClassName("TextAreaSubmitOnEnter")\n\n      for (let i = 0; i < els.length; i++) {\n        els[i].addEventListener("keypress", e => {\n          if (e.key === "Enter" && !e.shiftKey) {\n              e.preventDefault();\n              const submitButton = document.getElementById("ChatInputSubmitButton")\n              if (submitButton) {\n                submitButton.click() // Simulate click on submit button\n                for (let i = 0; i < tx.length; i++) {\n                  tx[i].style.height = \'auto\';\n                }\n              }\n          }\n        })\n      }  \n  })\n\n</script>'
        }
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(
          projectcss.all,
          sty.freeBox__eviLe,
          "ChatInputContainer",
          {
            [sty.freeBoxsubmitting__eviLeYfgPz]: hasVariant(
              $state,
              "submitting",
              "submitting"
            )
          }
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__s5Pg5)}>
          <div
            className={classNames(projectcss.all, sty.freeBox___4Nzua, {
              [sty.freeBoxsubmitting___4NzuaYfgPz]: hasVariant(
                $state,
                "submitting",
                "submitting"
              )
            })}
          >
            <textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.textarea,
                hasVariant($state, "submitting", "submitting")
                  ? "TextAreaNoDrag TextAreaNoHighlight TextAreaSubmitOnEnter CursorNotAllowed"
                  : "TextAreaNoDrag TextAreaNoHighlight  TextAreaSubmitOnEnter",
                {
                  [sty.textareasubmitting]: hasVariant(
                    $state,
                    "submitting",
                    "submitting"
                  )
                }
              )}
              disabled={
                hasVariant($state, "submitting", "submitting")
                  ? true
                  : undefined
              }
              onChange={e => {
                generateStateOnChangeProp($state, ["textarea", "value"])(
                  e.target.value
                );
              }}
              placeholder={args.placeholder}
              ref={ref => {
                $refs["textarea"] = ref;
              }}
              rows={1}
              value={
                generateStateValueProp($state, ["textarea", "value"]) ?? ""
              }
            />
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__g0NNl, {
              [sty.buttonsubmitting__g0NNlYfgPz]: hasVariant(
                $state,
                "submitting",
                "submitting"
              )
            })}
            id={"ChatInputSubmitButton"}
            isDisabled={
              hasVariant($state, "submitting", "submitting")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return (
                        $state.upload.files.length <= 0 &&
                        $state.textarea.value.length <= 0
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
            }
            shape={"round"}
            size={"minimal"}
          >
            <UpArrowSvgrepoCom2SvgIcon
              className={classNames(projectcss.all, sty.svg__y3N3A, {
                [sty.svgsubmitting__y3N3AYfgPz]: hasVariant(
                  $state,
                  "submitting",
                  "submitting"
                )
              })}
              role={"img"}
            />
          </Button>
        </div>
        <UploadWrapper
          data-plasmic-name={"upload"}
          data-plasmic-override={overrides.upload}
          accept={""}
          className={classNames("__wab_instance", sty.upload, {
            [sty.uploadsubmitting]: hasVariant(
              $state,
              "submitting",
              "submitting"
            )
          })}
          files={generateStateValueProp($state, ["upload", "files"])}
          listType={"picture"}
          multiple={true}
          onFilesChange={generateStateOnChangeProp($state, ["upload", "files"])}
          showUploadList={true}
        >
          <Button
            className={classNames("__wab_instance", sty.button__uwwv5, {
              [sty.buttonsubmitting__uwwv5YfgPz]: hasVariant(
                $state,
                "submitting",
                "submitting"
              )
            })}
            color={"clear"}
            isDisabled={
              hasVariant($state, "submitting", "submitting") ? true : undefined
            }
            shape={"round"}
            size={"minimal"}
          >
            <AttachSvgrepoComsvgIcon
              className={classNames(projectcss.all, sty.svg__ksuH4)}
              role={"img"}
            />
          </Button>
        </UploadWrapper>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml", "textarea", "upload"],
  embedHtml: ["embedHtml"],
  textarea: ["textarea"],
  upload: ["upload"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  textarea: "textarea";
  upload: typeof UploadWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatInputHypernova__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatInputHypernova__VariantsArgs;
    args?: PlasmicChatInputHypernova__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatInputHypernova__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicChatInputHypernova__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChatInputHypernova__ArgProps,
          internalVariantPropNames: PlasmicChatInputHypernova__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChatInputHypernova__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatInputHypernova";
  } else {
    func.displayName = `PlasmicChatInputHypernova.${nodeName}`;
  }
  return func;
}

export const PlasmicChatInputHypernova = Object.assign(
  // Top-level PlasmicChatInputHypernova renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    textarea: makeNodeComponent("textarea"),
    upload: makeNodeComponent("upload"),

    // Metadata about props expected for PlasmicChatInputHypernova
    internalVariantProps: PlasmicChatInputHypernova__VariantProps,
    internalArgProps: PlasmicChatInputHypernova__ArgProps
  }
);

export default PlasmicChatInputHypernova;
/* prettier-ignore-end */
